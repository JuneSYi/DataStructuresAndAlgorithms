2 types of DP
- Bottom up , also known as tabulation
- top down, also known as memoization

Bottom-up (Tabulation)
bottom-up is implemented with iteration and starts at the base cases. Fibonacci sequence as an example
The base cases for fibo seq are F(0) = 0 and F(1) = 1. With bottom-up, we would use these base cases to calculate F(2),
and then use that result to calculate F(3), and so on to F(n)

Top-down (Memoization)
Top-down is implemented with recursion and made efficient with memoization. if we wanted to find the nth fibo number,
we try to compute this by finding F(n-1) and F(n-2). The defines a recursive pattern that will continue on until we
reach the base case F(0) = F(1) = 1. The problem with just implementing it recursively is that there is a ton of
unnecessary repeated computation.
- the solution to this is to memoize results
    - memoizing a result means to store the result of a function call, usually in a hashmap or an array, so that when
    the same function call is made again, we can simply return the memoized result instead of recalculating the result.
    - typically results are stored in a hashmap, so that in the future, we can refer to the value we already calculated
- memoization means caching results from function calls and then referring to those results in the future instead of
recalculating them.


Random Notes:
o Problems that have optimal substructure and overlapping subproblems are good problems to be solved with dynamic
programming.

o Without memoization, a recursive solution for Fibonacci Number would have the time complexity O(2^n)

o Usually, a bottom-up algorithm will be faster than the equivalent top-down algorithm as there is some overhead with
recursive function calls. However, sometimes, a top-down dynamic programming approach will be the better option,
such as when only a fraction of the subproblems need to be solved.

o A common characteristic of problems that can be solved with dynamic programming is that they ask for the maximum
or minimum of something.

o generally speaking, divide and conquer approaches can be parallelized while dynamic programming approaches
cannot be (easily) parallelized. This is because the subproblems in divide an conquer approaches are independent
of one another (they do not overlap) while in dynamic programming, the subproblems do overlap.

o Top-down DP solutions are generally considered more intuitive because we can simply make recursive calls according
to the recurrence relation whenever the current state is not a base case. On the other hand, bottom-up DP solutions
require us to iterate over the subproblems in a specific order so that all of the results necessary to solve the
subproblem for the current state have already been obtained before arriving at the current state.

o When converting a top-down solution to a bottom-up solution, we can still use the same base case(s) and the same
recurrence relation. However, bottom-up dynamic programming solutions iterate over all of the states (starting at
the base case) such that all the results necessary to solve each subproblem for the current state have already been
obtained before arriving at the current state. So, to convert a top-down solution into a bottom-up solution, we must
first find a logical order in which to iterate over the states.

o Typically, top-down is implemented with a recursive function and hash map, whereas bottom-up is implemented with
nested for loops and an array.

